/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.kannada.converter.kanuaconvui;

import com.kannada.kanuaconv.Constants;
import com.kannada.kanuaconv.ConversionOption;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import junit.awtui.ProgressBar;
import javax.swing.Timer;
import com.kannada.kanuaconv.Test;
import com.kannada.kanuaconv.maps.ConversionMap;
import com.kannada.kanuaconv.maps.ConversionMapAnu;
import com.kannada.kanuaconv.maps.ConversionMapBrailleKan;
import com.kannada.kanuaconv.maps.ConversionMapKanBraille;
import com.kannada.kanuaconv.maps.ConversionMapPrakashak;
import com.kannada.kanuaconv.maps.ConversionMapSRG;
import com.kannada.kanuaconv.maps.ConversionMapSrgII;
import com.kannada.kanuaconv.maps.ConversionMapSrilipi;
import com.kannada.kanuaconv.maps.ConversionMapSurabhi;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JProgressBar;
import javax.swing.JTextField;
import javax.swing.ProgressMonitor;
import javax.swing.SwingWorker;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hwpf.HWPFDocument;
import org.apache.poi.hwpf.extractor.WordExtractor;
import org.apache.poi.hwpf.usermodel.CharacterRun;
import org.apache.poi.hwpf.usermodel.Paragraph;
import org.apache.poi.hwpf.usermodel.ParagraphProperties;
import org.apache.poi.hwpf.usermodel.Range;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xwpf.usermodel.XWPFTableCell;
import org.docx4j.TraversalUtil;
import org.docx4j.XmlUtils;
import org.docx4j.openpackaging.packages.WordprocessingMLPackage;
import org.docx4j.openpackaging.parts.WordprocessingML.MainDocumentPart;
import org.docx4j.wml.Body;

/**
 *
 * @author Administrator
 */
public class KanUAConvForm extends javax.swing.JFrame implements PropertyChangeListener{

    /**
     * Creates new form KanUAConvFram
     */
    String dataFormatSelected;
    Timer countdownTimer;
    int timeRemaining = 10;
    static String lastFolder;
    private ProgressMonitor progressMonitor;
    private StartConversion operation;
    public static List uniStringList = new ArrayList<Map<String, String>>();
    public static  JProgressBar jProgressBar = new JProgressBar();
    String outString = null;
        
    public KanUAConvForm() {
        initComponents();
 
        setIcon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldSrcFile = new javax.swing.JTextField();
        jTextFieldDstFile = new javax.swing.JTextField();
        jComboBoxFileFormat = new javax.swing.JComboBox();
        jButtonSrcFile = new javax.swing.JButton();
        jButtonDstFile = new javax.swing.JButton();
        jButtonConvert = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jButtonHelp = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ಕನ್ನಡ ಆಸ್ಕಿ(ASCII) ಯುನಿಕೋಡ್(UNICODE) ಪರಿವರ್ತಕ v1.2");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusCycleRoot(false);
        setFocusTraversalPolicyProvider(true);
        setFont(new java.awt.Font("puchamte", 0, 10)); // NOI18N
        setForeground(new java.awt.Color(51, 51, 51));
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Images/Karnataka Logo_s32.png")));
        setIconImages(null);
        setLocationByPlatform(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextFieldSrcFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSrcFileActionPerformed(evt);
            }
        });
        getContentPane().add(jTextFieldSrcFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 180, 380, 20));

        jTextFieldDstFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDstFileActionPerformed(evt);
            }
        });
        getContentPane().add(jTextFieldDstFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 220, 380, 20));

        jComboBoxFileFormat.setEditable(true);
        jComboBoxFileFormat.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jComboBoxFileFormat.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "GOK (Kuvempu Nudi Baraha)", "Anu Fonts", "Srilipi", "Surabhi", "WinKey-95", "WinKey-98", "Kannada Unicode To Braille", "Kannada ASCII To Braille", "Kannada Braille to Kannada Unicode", "Prakashak" }));
        jComboBoxFileFormat.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jComboBoxFileFormat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFileFormatActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBoxFileFormat, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 260, 200, 20));

        jButtonSrcFile.setFont(new java.awt.Font("Tunga", 0, 11)); // NOI18N
        jButtonSrcFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/selection.png"))); // NOI18N
        jButtonSrcFile.setToolTipText("select source file");
        jButtonSrcFile.setBorder(null);
        jButtonSrcFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSrcFileActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonSrcFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 180, 90, 20));

        jButtonDstFile.setFont(new java.awt.Font("Tunga", 0, 11)); // NOI18N
        jButtonDstFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/selection.png"))); // NOI18N
        jButtonDstFile.setToolTipText("select destination file");
        jButtonDstFile.setBorder(null);
        jButtonDstFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDstFileActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonDstFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 220, 90, 20));

        jButtonConvert.setFont(new java.awt.Font("Tunga", 0, 11)); // NOI18N
        jButtonConvert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/convert_up.png"))); // NOI18N
        jButtonConvert.setToolTipText("convert");
        jButtonConvert.setBorder(null);
        jButtonConvert.setBorderPainted(false);
        jButtonConvert.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/convert_down.png"))); // NOI18N
        jButtonConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConvertActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonConvert, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 300, 90, -1));

        jButtonCancel.setFont(new java.awt.Font("Tunga", 0, 11)); // NOI18N
        jButtonCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/remove_up.png"))); // NOI18N
        jButtonCancel.setToolTipText("close");
        jButtonCancel.setBorder(null);
        jButtonCancel.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/remove_down.png"))); // NOI18N
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 300, 90, -1));

        jButtonHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/help.png"))); // NOI18N
        jButtonHelp.setToolTipText("help");
        jButtonHelp.setBorder(null);
        jButtonHelp.setName("jButtonClose"); // NOI18N
        jButtonHelp.setPreferredSize(new java.awt.Dimension(90, 27));
        jButtonHelp.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/help.png"))); // NOI18N
        jButtonHelp.setRolloverEnabled(true);
        jButtonHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHelpActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonHelp, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 300, 90, -1));

        jLabel3.setFont(new java.awt.Font("Tunga", 0, 11)); // NOI18N
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/source.png"))); // NOI18N
        jLabel3.setText("ದತ್ತಾಂಶ ಶೈಲಿ");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 90, 20));

        jLabel4.setFont(new java.awt.Font("Tunga", 0, 11)); // NOI18N
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/format_type.png"))); // NOI18N
        jLabel4.setText("ದತ್ತಾಂಶ ಶೈಲಿ");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 260, 90, 20));

        jLabel6.setFont(new java.awt.Font("Tunga", 0, 11)); // NOI18N
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/target.png"))); // NOI18N
        jLabel6.setText("ದತ್ತಾಂಶ ಶೈಲಿ");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, 90, 20));

        jLabel2.setBackground(new java.awt.Color(153, 255, 255));
        jLabel2.setFont(new java.awt.Font("puchamte", 2, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 0));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/convertion_progress.jpg"))); // NOI18N
        jLabel2.setText("ಪರಿವರ್ತನೆ ಪ್ರಗತಿಯಲ್ಲಿದೆ.............");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 160, 190, 20));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/background.png"))); // NOI18N
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 350));

        getAccessibleContext().setAccessibleName("Kannada Converter");

        pack();
    }// </editor-fold>//GEN-END:initComponents

 
    
        public void propertyChange(PropertyChangeEvent event) {
        // if the operation is finished or has been canceled by
        // the user, take appropriate action
        if (progressMonitor.isCanceled()) {
            operation.cancel(true);
        } else if (event.getPropertyName().equals("progress")) {            
            // get the % complete from the progress event
            // and set it on the progress monitor
            int progress = ((Integer)event.getNewValue()).intValue();
            progress = progress > 99 ? 99 : progress;
            progressMonitor.setProgress(progress);            
        }        
    }
        
    private void jTextFieldDstFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDstFileActionPerformed
        // TODO add your handling code here:
         JFileChooser jfc = new JFileChooser();
         if(lastFolder != null)
           jfc.setCurrentDirectory(new File(lastFolder));
         jfc.setFileFilter(getFileExtension());
         jfc.setDialogType(JFileChooser.OPEN_DIALOG);
         if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
            //code to handle choosed file here. 
             File filePath = jfc.getSelectedFile().getAbsoluteFile();
             String path = filePath.getAbsolutePath();
             jTextFieldDstFile.setText(path);
             lastFolder = filePath.getPath();
        } 
         
    }//GEN-LAST:event_jTextFieldDstFileActionPerformed

    private void jButtonSrcFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSrcFileActionPerformed
        // TODO add your handling code here:
         JFileChooser jfc = new JFileChooser();
         
         
       if(lastFolder != null)
           jfc.setCurrentDirectory(new File(lastFolder));
         jfc.setFileFilter(getFileExtension());
         jfc.setDialogType(JFileChooser.OPEN_DIALOG);
         
         if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
            //code to handle choosed file here. 
             File filePath = jfc.getSelectedFile().getAbsoluteFile();
             String path = filePath.getAbsolutePath();
             lastFolder = filePath.getPath();
             jTextFieldSrcFile.setText(path);
        } 
    }//GEN-LAST:event_jButtonSrcFileActionPerformed

    private void jTextFieldSrcFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSrcFileActionPerformed
        // TODO add your handling code here:
         JFileChooser jfc = new JFileChooser();
         if(lastFolder != null)
           jfc.setCurrentDirectory(new File(lastFolder));
         jfc.setFileFilter(getFileExtension());
         jfc.setDialogType(JFileChooser.OPEN_DIALOG);
         if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
            //code to handle choosed file here. 
             File filePath = jfc.getSelectedFile().getAbsoluteFile();
             String path = filePath.getAbsolutePath();
             lastFolder = filePath.getPath();
             jTextFieldSrcFile.setText(path);
        } 
    }//GEN-LAST:event_jTextFieldSrcFileActionPerformed

    private void jButtonDstFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDstFileActionPerformed
        // TODO add your handling code here:
         JFileChooser jfc = new JFileChooser();
         if(lastFolder != null)
           jfc.setCurrentDirectory(new File(lastFolder));
         jfc.setFileFilter(getFileExtension());
         jfc.setDialogType(JFileChooser.OPEN_DIALOG);
         if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
            //code to handle choosed file here. 
             File filePath = jfc.getSelectedFile().getAbsoluteFile();
             String path = filePath.getAbsolutePath();
             lastFolder = filePath.getPath();
             jTextFieldDstFile.setText(path);
        } 
    }//GEN-LAST:event_jButtonDstFileActionPerformed

    private void jButtonConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConvertActionPerformed
        // TODO add your handling code here:
        dataFormatSelected = (String)jComboBoxFileFormat.getSelectedItem();
        //convert c = new convert();
    
         jLabel2.setVisible(true);

            progressMonitor.setProgress(0); 
         try{
             JOptionPane jop = new JOptionPane();     
             jop.setFont(new java.awt.Font("puchamte", 0, 10)); // NOI18N
             String Message = jTextFieldSrcFile.getText()+"  To  "+jTextFieldDstFile.getText()+"\n Data Format ::: "+dataFormatSelected;
             if(jop.showConfirmDialog(null,Message, "ಪರಿವರ್ತಕ", JOptionPane.OK_CANCEL_OPTION )==0){
                 jButtonConvert.disable();
                 System.out.println(dataFormatSelected);
                 //startConversion(jTextFieldSrcFile,jTextFieldDstFile,dataFormatSelected);
                
            operation = new StartConversion(jTextFieldSrcFile,jTextFieldDstFile,dataFormatSelected);
            // add ProgressMonitorExample as a listener on CopyFiles;
            // of specific interest is the bound property progress
            operation.addPropertyChangeListener(this);
            operation.execute();
            
                 jButtonConvert.enable();
                 jLabel2.setVisible(false);
             }else{
                 
             }
         }catch(Exception e){
         }

    }//GEN-LAST:event_jButtonConvertActionPerformed

    public void setConvertingLabel(Boolean flag){
         this.jLabel2.setVisible(flag);
         this.jLabel2.updateUI();
      }
    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jComboBoxFileFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFileFormatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxFileFormatActionPerformed

    private void jButtonHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHelpActionPerformed
        // TODO add your handling code here:
        String path =null;
        File f = null;
        f = new File("Converter Help.pdf");
        try {
            path = f.getCanonicalPath();
            System.out.println(path);
            Process p =
      Runtime.getRuntime()
        .exec("rundll32 url.dll,FileProtocolHandler "+path);
            try {
                p.waitFor();
            } catch (InterruptedException ex) {
                Logger.getLogger(KanUAConvForm.class.getName()).log(Level.SEVERE, null, ex);
            }
    
        } catch (IOException ex) {
            Logger.getLogger(KanUAConvForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
       // ProcessBuilder p = new ProcessBuilder("cmd /c "+path);
        //p.command();
    }//GEN-LAST:event_jButtonHelpActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
                SwingUtilities.invokeLater(new Runnable() {
            public void run() {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex)         {
            java.util.logging.Logger.getLogger(KanUAConvForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new KanUAConvForm().setVisible(true);
            }
        });
            }
                });
    }

public FileNameExtensionFilter getFileExtension(){
          FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Doc & Excel Files", "doc", "xls","docx", "xlsx","txt");
          return filter;
}

private void setIcon(){
    jLabel2.setVisible(false);
    jLabel2.setFont(null);
   setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Images/Karnataka Logo_s32.png")));
               progressMonitor = new ProgressMonitor(KanUAConvForm.this,
                                                  "Operation in progress...",
                                                  "", 0, 100);
}


 
   class StartConversion extends SwingWorker<Void, CopyData> {        
        private static final int PROGRESS_CHECKPOINT = 10;
        private JTextField jTextFieldSrcFile;
        private JTextField jTextFieldDstFile;
        private String dataFormatSelected;
        
        StartConversion(JTextField jTextFieldSrcFile,JTextField jTextFieldDstFile,String dataFormatSelected) {
            this.jTextFieldSrcFile = jTextFieldSrcFile;
            this.jTextFieldDstFile = jTextFieldDstFile;
            this.dataFormatSelected = dataFormatSelected;
        }
        
        // perform time-consuming copy task in the worker thread
        @Override
        public Void doInBackground() {
                        
            startConversion(jTextFieldSrcFile,jTextFieldDstFile,dataFormatSelected);
            
            return null;
        }

        // process copy task progress data in the event dispatch thread
        @Override
        public void process(List<CopyData> data) {
            if(isCancelled()) { return; }
            CopyData update  = new CopyData(0, "", 0, 0);
            for (CopyData d : data) {
                // progress updates may be batched, so get the most recent
                if (d.getKiloBytesCopied() > update.getKiloBytesCopied()) {
                    update = d;
                }
            }
            
            // update the progress monitor's status note with the
            // latest progress data from the copy operation, and
            // additionally append the note to the console
            String progressNote = update.getKiloBytesCopied() + " of " 
                                  + update.getTotalKiloBytes() + " kb converted.";
            String fileNameNote = "Now converting " + update.getFileName();
            System.out.println(" Setting note "+ progressNote + " " + fileNameNote);
//            if (update.getProgress() < 100) {
                progressMonitor.setNote(progressNote + " " + fileNameNote);
//               // console.append(progressNote + "\n" + fileNameNote + "\n");
//            } else {
//                progressMonitor.setNote(progressNote);
//               // console.append(progressNote + "\n");
//            }           
        }
        
        // perform final updates in the event dispatch thread
        @Override
        public void done() {
            try {
                // call get() to tell us whether the operation completed or 
                // was canceled; we don't do anything with this result
                Void result = get();
                //console.append("Copy operation completed.\n");                
            } catch (InterruptedException e) {
                
            } catch (CancellationException e) {
                // get() throws CancellationException if background task was canceled
                //console.append("Copy operation canceled.\n");
            } catch (ExecutionException e) {
               // console.append("Exception occurred: " + e.getCause());
            }
       
            // reset the example app
           //copyButton.setEnabled(true);
           // progressMonitor.setProgress(0);
            progressMonitor.close();
        }

        private long calcTotalBytes(File[] files) {
            long tmpCount = 0;
            for (File f : files) {
                tmpCount += f.length();
            }
            return tmpCount;
        }
        
        private long calcTotalBytes(File files) {
            long tmpCount = 0;
     
                tmpCount += files.length();
 
            return tmpCount;
        }
        
        private long getTotalKiloBytes(long totalBytes) {
            return Math.round(totalBytes / 1024);
        }

        private long getKiloBytesCopied(long bytesCopied) {
            return Math.round(bytesCopied / 1024);
        }
        
        public void startConversion(JTextField jTextFieldSrcFile,JTextField jTextFieldDstFile,String dataFormatSelected){
         Test ti = new Test();
         String inFilePath = null;
         String outFilePath = null;
         String fileFormat  = null;
         String outFileFormat = null;
         boolean errorOccured = false;
         ConversionProgress cp = new ConversionProgress();
         
              inFilePath = jTextFieldSrcFile.getText().toString();
              outFilePath = jTextFieldDstFile.getText().toString();
              
         fileFormat = inFilePath.substring(inFilePath.lastIndexOf(".")+1, inFilePath.length());
         try{
         outFileFormat = outFilePath.substring(outFilePath.lastIndexOf(".")+1, outFilePath.length());
         }catch(Exception e){
             outFileFormat = "na";
         }
         
         if(!fileFormat.equalsIgnoreCase(outFileFormat)){
             if(fileFormat.equalsIgnoreCase("txt") && outFileFormat.equalsIgnoreCase("docx")){
                 fileFormat = "texttodocx";
             }else  if(fileFormat.equalsIgnoreCase("txt") && outFileFormat.equalsIgnoreCase("doc")){
                 fileFormat = "texttodoc";
             
             }
                 
         }
         
                          System.out.println("Conversion Started");
                          
         if(new File(jTextFieldSrcFile.getText().toString()).canRead() 
                 && jTextFieldSrcFile.getText().toString().length()>0 && jTextFieldDstFile.getText().toString().length() >0
                 && !(jTextFieldSrcFile.getText().toString().equals(jTextFieldDstFile.getText().toString()))
            )
         {

              if(outFilePath == null || outFilePath.equals("") || outFilePath.length() <=0){
                   outFilePath = inFilePath.substring(0, inFilePath.lastIndexOf("."))+"_Converted_"+inFilePath.substring(inFilePath.lastIndexOf("."), inFilePath.length());
              }
              if(outFileFormat.equalsIgnoreCase("na")){
                  {
                      outFilePath = outFilePath.concat(fileFormat);
                  }
 
              
                 }
             if(fileFormat.equalsIgnoreCase("doc")){
                 fileFormat = "word";
             }if(fileFormat.equalsIgnoreCase("xls")){
                 fileFormat = "excel";
             }if(fileFormat.equalsIgnoreCase("docx")){
                 fileFormat = "wordx";
             }if(fileFormat.equalsIgnoreCase("xlsx")){
                 fileFormat = "excelx";
             }if(fileFormat.equalsIgnoreCase("txt")){
                 fileFormat = "text";
             }if(fileFormat.equalsIgnoreCase("texttodocx")){
                 fileFormat = "texttodocx";
             }if(fileFormat.equalsIgnoreCase("texttodoc")){
                 fileFormat = "texttodoc";
             }
             try{
                   System.out.println(dataFormatSelected);
                 ConvertAll(inFilePath, outFilePath, (String)FontNameMap.NameMap.get(dataFormatSelected), fileFormat);
             }catch(IOException iOE){
                 //cp.stopProgress();
                 iOE.printStackTrace();
                 errorOccured = true;
                 CommonMessage cm = new CommonMessage("ಕಡತದ ಹೆಸರುಗಳನ್ನು ಸರಿಯಾಗಿ ಹೊಂದಿಸಲಾಗಿಲ್ಲ. ಕಡತ ಗಳನ್ನು ಪರಿಶೀಲಿಸಿ.");
                 cm.execute("ಕಡತದ ಹೆಸರುಗಳನ್ನು ಸರಿಯಾಗಿ ಹೊಂದಿಸಲಾಗಿಲ್ಲ. ಕಡತ ಗಳನ್ನು ಪರಿಶೀಲಿಸಿ.");
                 //ce.
             }catch(Exception e){
                 //cp.stopProgress();
                 errorOccured = true;
                 CommonMessage cm = new CommonMessage("ಪರಿವರ್ತಿಸುವ ಸಂದರ್ಭದಲ್ಲಿ ಡೇಟಾ ದೋಷ ಸಂಭವಿಸಿದೆ. ದಯವಿಟ್ಟು. ವರದಿ ಮಾಡಿ");
                 cm.execute("ಪರಿವರ್ತಿಸುವ ಸಂದರ್ಭದಲ್ಲಿ ಡೇಟಾ ದೋಷ ಸಂಭವಿಸಿದೆ. ದಯವಿಟ್ಟು. ವರದಿ ಮಾಡಿ");
                 e.printStackTrace();
             }
             if(errorOccured){
                 //cp.stopProgress();
                 CommonMessage cm = new CommonMessage("ಪರಿವರ್ತಿಸುವ ಒಂದು ದೋಷ ಕಂಡುಬಂದಿದೆ. ದಯವಿಟ್ಟು. ವರದಿ ಮಾಡಿ");
                 cm.execute("ಪರಿವರ್ತಿಸುವ ಒಂದು ದೋಷ ಕಂಡುಬಂದಿದೆ. ದಯವಿಟ್ಟು. ವರದಿ ಮಾಡಿ");
            }else{
                 //cp.stopProgress();
                 ConversionCompletion cm = new ConversionCompletion();
                 cm.execute();
             }
         }else{
            CommonMessage cm = new CommonMessage("ಕಡತದ ಹೆಸರುಗಳನ್ನು ಸರಿಯಾಗಿ ಹೊಂದಿಸಲಾಗಿಲ್ಲ. ಕಡತ ಗಳನ್ನು ಪರಿಶೀಲಿಸಿ.");
            cm.execute("ಕಡತದ ಹೆಸರುಗಳನ್ನು ಸರಿಯಾಗಿ ಹೊಂದಿಸಲಾಗಿಲ್ಲ. ಕಡತ ಗಳನ್ನು ಪರಿಶೀಲಿಸಿ.");
           }
    }
        
        public void ConvertAll(String inFile,String outFile,String dataFormat,String fileFormat) throws FileNotFoundException, IOException 
            {
                System.out.println(inFile);
                System.out.println(outFile);
                System.out.println(dataFormat);
                System.out.println(fileFormat);
    			ConversionOption.dataFormat = dataFormat;
    			ConversionOption.fileFormat = fileFormat;
    			//String inFile = inFile;
    			//String outFile = outFile;
    			//Test ti = new Test();
    			ConversionMap.initializeMaps();
    			if(ConversionOption.fileFormat.equalsIgnoreCase("word")){
                                wordConverter(inFile,outFile);
    			}else if(ConversionOption.fileFormat.equalsIgnoreCase("excel")){
				excelConverter(inFile,outFile);
                        }else if(ConversionOption.fileFormat.equalsIgnoreCase("wordx")){
                                wordXConverter(inFile, outFile);
    			}else if(ConversionOption.fileFormat.equalsIgnoreCase("excelx")){
				excelXConverter(inFile,outFile);
    			}else if(ConversionOption.fileFormat.equalsIgnoreCase("text")){
    				textConverter(inFile, outFile);
    			}else if(ConversionOption.fileFormat.equalsIgnoreCase("texttodocx")){
    				textToDocxConverter(inFile, outFile);
    			}else if(ConversionOption.fileFormat.equalsIgnoreCase("texttodoc")){
    				textToDocConverter(inFile, outFile);
    			}
        System.out.println("Converted Fine");
                        return;
    			//outFile = ti.convertWord("PÀ£ÀßqÀ ºÁ¸À£À gÁµÀÖç  PÀ£ÀßqÀ ªÀÄvÀÄÛ ¸ÀA¸ÀÌøw E¯ÁPÉ");
    	}
    
     public String convertWord(String inText){
    	String retVal = null;
        boolean skip = false;
    
  
        System.out.println("Setting Progress");
    	if(ConversionOption.dataFormat.equals(Constants.datFormat._anu.toString())){
    		inText = convertAnu(inText);
    	}else if(ConversionOption.dataFormat.equals(Constants.datFormat._prakashak.toString())){
    		inText = convertPrakashak(inText);
    	}else if(ConversionOption.dataFormat.equals(Constants.datFormat._srg1.toString())){
    		inText = convertSrg1(inText);
        }else if(ConversionOption.dataFormat.equals(Constants.datFormat._srg2.toString())){
    		inText = convertSrg2(inText);                
    	}else if(ConversionOption.dataFormat.equals(Constants.datFormat._surabhi.toString())){
    		inText = convertSurabhi(inText);
    	}else if(ConversionOption.dataFormat.equals(Constants.datFormat._sriLipi.toString())){
    		inText = convertSriLipi(inText);
    	}else if(ConversionOption.dataFormat.equals(Constants.datFormat._prakashak.toString())){
    		inText = convertPrakashak(inText);                
    	}else if(ConversionOption.dataFormat.equals(Constants.datFormat._kanUni.toString())){
            ConversionMapKanBraille cMapKanBraille = new ConversionMapKanBraille();
    		inText = cMapKanBraille.convertWord(inText);
                retVal = inText;
                skip = true;
    	}else if(ConversionOption.dataFormat.equals(Constants.datFormat._kanASCII.toString())){
                getReplaceMent(inText);
                inText = test();
                //System.out.println("Unicode Kannada"+inText);
                ConversionMapKanBraille cMapKanBraille = new ConversionMapKanBraille();
    		inText = cMapKanBraille.convertWord(inText);
                retVal = inText;
                skip = true;
    	}else if(ConversionOption.dataFormat.equals(Constants.datFormat._kanBraille.toString())){
                //getReplaceMent(inText);
                //inText = test();
                //System.out.println("Unicode Kannada"+inText);
                ConversionMapBrailleKan cMapBrailleKan = new ConversionMapBrailleKan();
    		inText = cMapBrailleKan.convertWord(inText);
                retVal = inText;
                skip = true;
    	}    

        System.out.println("The input text is "+inText);
        if(!skip){
    	getReplaceMent(inText);
    	retVal = test();
        }
        
    	return retVal;
    }
    
    public String test(){

    	ConversionMap.initializeMaps();
    	
    	outString = new String();
    	Iterator it = uniStringList.iterator();
   
    	
    	while(it.hasNext()){
    		Map tMap = (Map)it.next();
    		Set s = tMap.keySet();
    		 Iterator it1 = s.iterator();
    		 String currentChar;
    		 
    		 while(it1.hasNext()){
    			 currentChar = tMap.get(it1.next()).toString();
    			 outString  = setOutString(currentChar);
    		 }
    	}
    	System.out.print(outString);
    	return outString;
    }
    
    public String setOutString(String currentString){
    	String retVal = new String();
    	StringBuilder retString = new StringBuilder();
    	int i;
    	int oL = outString.length();
    	char newOutString[] = new char[65000];
    	
		char tempSubst[] = currentString.toCharArray();

    	if(outString != null && outString.length()>0){
        	char outStringChar[] = outString.toCharArray();
        	char tempC = outStringChar[oL-1];
        	for(int o=0;o<oL;o++){
        		newOutString[o]=outStringChar[o];
        	}
        	
                if((new StringBuilder()).append(outStringChar[oL-1]).toString().equals("್") && 
                        ConversionMap.ottaksharaList.contains(currentString)){
                    	for(i=0;i<currentString.length();i++){
	    			newOutString[oL-1+i] = tempSubst[i];
	    		}
	    		newOutString[oL-1+i]=tempC;
                        newOutString[oL+i]='\u200C';
	    		newOutString[oL+i+1]='\0';
	    		StringBuilder sb = new StringBuilder();
	    		
	    		for(Integer k=0;newOutString[k] != '\0'; k++){
	    			sb.append(newOutString[k]);
	    		}
	    		retString.append(sb.toString());
                }
                else
         	if(ConversionMap.gunitakshara.contains((new StringBuilder()).append(outStringChar[oL-1]).toString()) &&
	    			ConversionMap.ottaksharaList.contains(currentString)		
	    	   ){
	    		for(i=0;i<currentString.length();i++){  
	    			newOutString[oL-1+i] = tempSubst[i];
	    		}
	    		newOutString[oL-1+i]=tempC;
	    		newOutString[oL+i]='\0';
	    		StringBuilder sb = new StringBuilder();
	    		
	    		for(Integer k=0;newOutString[k] != '\0'; k++){
	    			sb.append(newOutString[k]);
	    		}
	    		retString.append(sb.toString());
	    	}else{
	    		retString.append(outStringChar);
	    		retString.append(currentString);
	    	}
    	}else
    		retString.append(currentString);
    		
    	retVal = retString.toString();
    	return retVal;
    }
    public  void excelConverter(String inFile,String outFile) {
    	    /** --Define a Vector
                --Holds Vectors Of Cells
             */
            Vector cellVectorHolder = new Vector();
            String fileName = inFile;
            
            long totalBytes = calcTotalBytes(new File(inFile));
            long bytesCopied = 0;
            long previousLen = 0;
            int counter = 0;
            int progress = 0;
            
            try{
            /** Creating Input Stream**/
            //InputStream myInput= ReadExcelFile.class.getResourceAsStream( fileName );
            FileInputStream myInput = new FileInputStream(fileName);
     
            /** Create a POIFSFileSystem object**/
            POIFSFileSystem myFileSystem = new POIFSFileSystem(myInput);
     
            /** Create a workbook using the File System**/
             HSSFWorkbook myWorkBook = new HSSFWorkbook(myFileSystem);
     
             /** Get the first sheet from workbook**/
            HSSFSheet mySheet = myWorkBook.getSheetAt(0);
     
            /** We now need something to iterate through the cells.**/
              Iterator rowIter = mySheet.rowIterator();
     
              while(rowIter.hasNext()){
                  HSSFRow myRow = (HSSFRow) rowIter.next();
                  Iterator cellIter = myRow.cellIterator();
                  Vector cellStoreVector=new Vector();
                  while(cellIter.hasNext()){
                      HSSFCell myCell = (HSSFCell) cellIter.next();
                      //cellStoreVector.addElement(myCell);
                      uniStringList = new  ArrayList<Map<String, String>>();    
                      try{
                      String cValue = myCell.getStringCellValue();
                      String replacingText = convertWord(cValue);
                      CellStyle cs = myCell.getCellStyle();
                      HSSFFont f = myWorkBook.getFontAt(cs.getFontIndex());
                      System.out.println(f.getFontName());
                      myCell.setCellValue(replacingText);
            
                                      bytesCopied+=cValue.length();
                                
                            CopyData current = new CopyData(progress, inFile,
                                                                getTotalKiloBytes(totalBytes),
                                                                getKiloBytesCopied(bytesCopied));
                                                   // set new value on bound property
                                // progress and fire property change event
                            progress = progress > 99 ? 99 : progress;
                                setProgress(progress);
                                System.out.println ("Progress is --->  "+progress);
                                // publish current progress data for copy task
                                publish(current);
            
                      }catch(Exception e){
                          System.out.println("Some error happened column"+myCell.getColumnIndex()+1+"row "+myCell.getRowIndex()+1);
                          e.printStackTrace();
                      }
                  }
                  //cellVectorHolder.addElement(cellStoreVector);
              }
              myWorkBook.write(new FileOutputStream(new File(outFile)));
              
              
              myInput.close();
              
              progress = (int)((100 * totalBytes) /totalBytes );
                                            CopyData current = new CopyData(progress, inFile,
                                                                getTotalKiloBytes(totalBytes),
                                                                getKiloBytesCopied(totalBytes));
                                            progress = progress > 99 ? 99 : progress;
                                            setProgress(progress);
                                            System.out.println ("Progress is --->  "+progress);
                                            // publish current progress data for copy task
                                            publish(current);
                
              
            }catch (Exception e){
            	e.printStackTrace(); 
            }
            
            

            //return cellVectorHolder;
        }
     
    public  void excelXConverter(String inFile,String outFile){
        
           int progress = 0;
            // initialize bound property progress (inherited from SwingWorker)
            setProgress(0);
            // get the files to be copied from the source directory
            //File[] files = srcDir.listFiles();
            // determine the scope of the task
            long totalBytes = calcTotalBytes(new File(inFile));
            long bytesCopied = 0;
            long previousLen = 0;
            int counter = 0;
            
		try{
                Workbook workBook = new SXSSFWorkbook(); 
		workBook = WorkbookFactory.create(new FileInputStream(inFile)); 
		int noOfSheets = workBook.getNumberOfSheets();
                totalBytes = inFile.getBytes().length;
		for(int s=0;s<noOfSheets;s++){
		Sheet sheet = workBook.getSheetAt(s);
		if(sheet!=null){
		int totalRows = sheet.getLastRowNum();
		for (int i=0; i<=totalRows; i++) { 
		    Row row = sheet.getRow(i); 
		    if(row != null){
		    int totalCols = row.getLastCellNum();
		    for(int j=0; j<totalCols; j++) { 
		        Cell myCell = row.getCell(j); 
		        if(myCell!=null){
                            uniStringList = new  ArrayList<Map<String, String>>();
                            try{
                            String cValue = myCell.getStringCellValue();
                            String replacingText = convertWord(cValue);
                            myCell.setCellValue(replacingText);
                            
                            bytesCopied+=cValue.length();
                                
                            CopyData current = new CopyData(progress, inFile,
                                                                getTotalKiloBytes(totalBytes),
                                                                getKiloBytesCopied(bytesCopied));
                                                   // set new value on bound property
                                // progress and fire property change event
                            progress = progress > 99 ? 99 : progress;
                                setProgress(progress);
                                System.out.println ("Progress is --->  "+progress);
                                // publish current progress data for copy task
                                publish(current);
                                
                            
                            }catch(Exception e){
                                System.out.println("Some error happened columen"+myCell.getColumnIndex()+1+"row "+myCell.getRowIndex()+1);
                                e.printStackTrace();
                            }
                        }
		    	} 
		     }
		    }
		  } 
		 }
		
		workBook.write(new FileOutputStream(new File(outFile)));

                progress = (int)((100 * totalBytes) /totalBytes );
                                            CopyData current = new CopyData(progress, inFile,
                                                                getTotalKiloBytes(totalBytes),
                                                                getKiloBytesCopied(totalBytes));
                                            progress = progress > 99 ? 99 : progress;
                                            setProgress(progress);
                                            System.out.println ("Progress is --->  "+progress);
                                            // publish current progress data for copy task
                                            publish(current);
                                            
    }catch(Exception e){
    e.printStackTrace();
    }
   }

public  void wordXConverter(String inFile,String outFile){
  
 
         String inputfilepath =  inFile;
            int progress = 0;
            // initialize bound property progress (inherited from SwingWorker)
            setProgress(0);
            // get the files to be copied from the source directory
            //File[] files = srcDir.listFiles();
            // determine the scope of the task
           final long totalBytes = calcTotalBytes(new File(inFile));
           final String finalInFile = inFile;
         try{
         WordprocessingMLPackage wordMLPackage = WordprocessingMLPackage.load(new java.io.File(inputfilepath));
                 
         final MainDocumentPart documentPart = wordMLPackage.getMainDocumentPart();
                    
         org.docx4j.wml.Document wmlDocumentEl = (org.docx4j.wml.Document) documentPart
                .getJaxbElement();
          Body body = wmlDocumentEl.getBody();
          final int bodyLength = wmlDocumentEl.getContent().toString().length();
        TraversalUtil traversalUtil = new TraversalUtil(body,new TraversalUtil.Callback()
                                      {
                                         
                                         String indent = "";
                                                     
                                        long bytesCopied = 0;
                                        long previousLen = 0;
                                        int counter = 0;
                                        int progress = 0;
                                       
                                         
                                         org.docx4j.wml.ObjectFactory factory = new org.docx4j.wml.ObjectFactory();
                                         
                                         org.docx4j.wml.R tmpR = factory.createR();
                                          
                                         org.docx4j.wml.RPr RPr = factory.createRPr();
                                         
                                         public List<Object> apply(Object o)
                                         {
                                            
                                            if (o instanceof org.docx4j.wml.Text)
                                            {
                                                uniStringList = new  ArrayList<Map<String, String>>();
                                                org.docx4j.wml.Text t = (org.docx4j.wml.Text) o; 
                                                Object o1 = t.getParent();
                                                           System.out.println("Text Object is "+t.getValue());
                                                           String replacingText = convertWord(t.getValue());
                                                           t.setValue(replacingText);
                                            bytesCopied += t.getValue().length();
                                            previousLen = t.getValue().length();  
                                            progress = (int)((100 * bytesCopied) /bodyLength < bytesCopied ? bodyLength : bytesCopied);
                                            CopyData current = new CopyData(progress, finalInFile,
                                                                getTotalKiloBytes(bodyLength < bytesCopied ? bodyLength : bytesCopied),
                                                                getKiloBytesCopied(bodyLength < bytesCopied ? bodyLength : bytesCopied));
                                            progress = progress > 99 ? 99 : progress;
                                            setProgress(progress);
                                            System.out.println ("Progress is --->  "+progress);
                                            // publish current progress data for copy task
                                            publish(current);
                                
                                            }
                                            
                                            if (o instanceof org.docx4j.wml.Fonts)
                                            {
                                               org.docx4j.wml.Fonts f = (org.docx4j.wml.Fonts) o;
                                               List fonts = f.getFont();
                                            }
                                            
                                            return null;
                                         }
                                         
                                          @Override
                                         public boolean shouldTraverse(Object o)
                                         {
                                            return true;
                                         }
                                         
                                          @Override
                                         public void walkJAXBElements(Object parent)
                                         {
                                            
                                            indent += "    ";            
                                            List children = getChildren(parent);
                                            if (children != null)
                                            {               
                                               for (Object o : children)
                                               {
                                                           
                                                  o = XmlUtils.unwrap(o);
                                                  
                                                  this.apply(o);
                                                  
                                                  if (this.shouldTraverse(o))
                                                  {
                                                     walkJAXBElements(o);
                                                  }
                                                  
                                               }
                                               
                                            }
                                            
                                            indent = indent.substring(0, indent.length() - 4);
                                         }
                                         
                                         public List<Object> getChildren(Object o)
                                         {
                                            return TraversalUtil.getChildrenImpl(o);
                                         }
                                         
                                      }

                                      );
        
         progress = (int)((100 * bodyLength) /bodyLength );
                                            CopyData current = new CopyData(progress, finalInFile,
                                                                getTotalKiloBytes(bodyLength),
                                                                getKiloBytesCopied(bodyLength));
                                            progress = progress > 99 ? 99 : progress;
                                            setProgress(progress);
                                            System.out.println ("Progress is --->  "+progress);
                                            // publish current progress data for copy task
                                            publish(current);
          
         wordMLPackage.save(new File(outFile));
         
         }catch(Exception e){
             e.printStackTrace();
         }
       
}

private void removeParagraphs(XWPFTableCell tableCell) {
    int count = tableCell.getParagraphs().size();
    for(int i = 0; i < count; i++){
    tableCell.removeParagraph(i);
    }
}
public  void wordConverter(String inFile,String outFile)throws FileNotFoundException, IOException{

        int startOffset;
        int endOffset;
        int runIndex;
        int textLength = 0;
            String filesname = inFile;
            POIFSFileSystem fs = null;
            fs = new POIFSFileSystem(new FileInputStream(filesname));
            HWPFDocument doc = new HWPFDocument(fs);
            Range r = doc.getRange();
            startOffset = r.getStartOffset();
            endOffset = r.getEndOffset();
           
            ConversionMap.initializeMaps();
            runIndex = startOffset;
 
            WordExtractor wordExtract=new WordExtractor(doc); 
            String [] dataArray =wordExtract.getParagraphText();
            // dataArray stores the each line from the document
           StringBuilder  tempWord = new StringBuilder();
           String replacingText = new String();
           int wi = 0;
            int progress = 0;
            // initialize bound property progress (inherited from SwingWorker)
            setProgress(0);
            // get the files to be copied from the source directory
            //File[] files = srcDir.listFiles();
            // determine the scope of the task
            long totalBytes = calcTotalBytes(new File(inFile));
            long bytesCopied = 0;
            long previousLen = 0;
            int counter = 0;
            
      //while (!isCancelled() || progress <100) { 
            for(int i=0;i<dataArray.length;i++)
            {
                String s = dataArray[i];
                	wi = 0;
                    uniStringList = new  ArrayList<Map<String, String>>();
                   bytesCopied += s.length();
                   previousLen = s.length();
                    try{
                    replacingText = convertWord(s);
                    if(replacingText!=null && replacingText.length()>0)
                    {
                        System.out.println("The replacing text is--> "+replacingText+" replaced text is --> "+tempWord.toString()+" at "+textLength);
                        r.replaceText(s,replacingText,textLength);
                    }
                   
                    if(replacingText!=null && replacingText.length()>0)
                    textLength = textLength+replacingText.length();
                    else {
                                           textLength = textLength+1;
                    }
                    System.out.println("The progressing  "+progress+" bytesCopied text is "+bytesCopied+"  and  "+dataArray.toString().length());
                    progress = (int)(100*(bytesCopied) / dataArray.toString().length());
                    System.out.println("The progress text is "+progress+" bytesCopied text is "+bytesCopied+"  and  "+dataArray.toString().length());
                                counter = 0;
                                CopyData current = new CopyData(progress, inFile,
                                                                getTotalKiloBytes(totalBytes),
                                                                getKiloBytesCopied(bytesCopied));
                                                   // set new value on bound property
                                // progress and fire property change event
                                progress = progress > 99 ? 99 : progress;
                                setProgress(progress);
                                System.out.println ("Progress is --->  "+progress);
                                // publish current progress data for copy task
                                publish(current);
            
                    }catch(Exception e)
                    {
                        e.printStackTrace();
                    }
            }
            progress = 100;
            CopyData current = new CopyData(progress, inFile,
                                                                getTotalKiloBytes(totalBytes),
                                                                getKiloBytesCopied(bytesCopied));
            setProgress(progress);
            publish(current);
     // }
            doc.write(new FileOutputStream(new File(outFile)));
            //closing fileinputstream
    
    }
   
public  void textToDocConverter(String inFile,String outFile)throws FileNotFoundException, IOException{

        int startOffset;
        int endOffset;
        int runIndex;
        int textLength = 0;
            String filesname = inFile;
            POIFSFileSystem fs = null;
           String dummyFile = "dummy.doc";
           System.out.println("The directory is "+new java.io.File( "." ).getCanonicalPath());
           fs = new POIFSFileSystem(new FileInputStream(dummyFile));
            HWPFDocument doc = new HWPFDocument(fs);
            Range range = doc.getRange();
 
            	try{
  		  String tempFile = outFile+"tmp";
                  textConverter(inFile,tempFile);
                    int len;
                    char[] chr = new char[4096];
                    final StringBuffer buffer = new StringBuffer();
      
                final FileReader reader = new FileReader(tempFile);

                try {
                    while ((len = reader.read(chr)) > 0) {
                        buffer.append(chr, 0, len);
                    }
                } finally {
                    reader.close();
                    new File(tempFile).delete();
                }
               //doc.getParagraphTable()
                CharacterRun run = range.insertAfter(buffer.toString());  
                OutputStream outStream = new  FileOutputStream(outFile);
                doc.write(outStream); 
                outStream.flush();
                outStream.close();
               
    	   }catch (Exception e){//Catch exception if any
    		  e.printStackTrace();
    		  System.err.println("Error: " + e.getMessage());
        }
           
            //closing fileinputstream
    
    }

        public  void textToDocxConverter(String inFile,String outFile)throws FileNotFoundException, IOException{
    	
    	try{
  		  String tempFile = outFile+"tmp";
                  textConverter(inFile,tempFile);
                    int len;
                    char[] chr = new char[4096];
                    final StringBuffer buffer = new StringBuffer();
      
                final FileReader reader = new FileReader(tempFile);

                try {
                    while ((len = reader.read(chr)) > 0) {
                        buffer.append(chr, 0, len);
                    }
                } finally {
                    reader.close();
                    new File(tempFile).delete();
                }
      
                  WordprocessingMLPackage wordMLPackage = WordprocessingMLPackage.createPackage();
                  wordMLPackage.getMainDocumentPart().addParagraphOfText(buffer.toString());
                  wordMLPackage.save(new java.io.File(outFile));
    	   }catch (Exception e){//Catch exception if any
    		  e.printStackTrace();
    		  System.err.println("Error: " + e.getMessage());
        }
    
    }
    
        
    public  void textConverter(String inFile,String outFile)throws FileNotFoundException, IOException{
    	
    	try{
  		  
    		  FileReader fr = new FileReader(inFile);
    		  //BufferedReader br = new BufferedReader(fr); 
    		  BufferedReader in;
                  
    		  Writer out = new OutputStreamWriter(new FileOutputStream(outFile),"UTF-8");
    		  //Reader in = new InputStreamReader(new FileInputStream(inFile), "ASCII");
    		  String strLine;
    		  String outStrLine;
    		  if(ConversionOption.dataFormat.equals(Constants.datFormat._kanUni.toString())){
                       in = new BufferedReader(new InputStreamReader(new FileInputStream(inFile),"UNICODE"));
                  }else
    		   in = new BufferedReader(new InputStreamReader(new FileInputStream(inFile),"windows-1252"));
 
            int progress = 0;
            // initialize bound property progress (inherited from SwingWorker)
            setProgress(0);
            // get the files to be copied from the source directory
            //File[] files = srcDir.listFiles();
            // determine the scope of the task
            long totalBytes = calcTotalBytes(new File(inFile));
            long bytesCopied = 0;
            
           // while (!isCancelled() || !isDone()) {                 

                   long previousLen = 0;
                    
                    try {
                 
                        byte[] buf = new byte[1024];
                        int counter = 0;
                        int len;
                        
    		  while ((strLine = in.readLine()) != null)   {
    		  // Print the content on the console
    		  counter += strLine.length();
    
                  bytesCopied += strLine.length();
                   previousLen = strLine.length();
                  uniStringList = new ArrayList<Map<String, String>>();
    		    try {
                        // if (counter > PROGRESS_CHECKPOINT || bytesCopied == totalBytes) {
                                // get % complete for the task
                                progress = (int)((100 * bytesCopied) / totalBytes);
                                counter = 0;
                                CopyData current = new CopyData(progress, inFile,
                                                                getTotalKiloBytes(totalBytes),
                                                                getKiloBytesCopied(bytesCopied));

                                // set new value on bound property
                                // progress and fire property change event
                                progress = progress > 99 ? 99 : progress;
                                setProgress(progress);
                                System.out.println ("Progress is --->  "+progress);
                                // publish current progress data for copy task
                                publish(current);
                          //  }
                         		  outStrLine = convertWord(strLine);
                      System.out.println(" \nThe line "+outStrLine);
    		      out.write(outStrLine);
                      out.write("\r\n");
   		    }catch(IOException ioE){
    		    	ioE.printStackTrace();
    		    }
    		  }
                        
                      in.close();
                        out.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                //}
            //}
            
            return;
        } catch (IOException e) {
                        e.printStackTrace();
                    }
    
    }
    public String getReplaceMent(String inText){
    	
    	String retVal;
    	   retVal = processUniText(getUniText(inText));
    	return inText;
    }

    public String processUniText(int len){
    	String retVal = null;
    	
//    	uniStringList.
    	
    	return retVal;
    }
    private int getUniText(String buffer) {
		// TODO Auto-generated method stub
    	StringBuilder in = new StringBuilder();
    	int k = 0;
    	int j = 0;
    	Map m;
    	buffer = buffer.replaceAll("ö", "");
        buffer = buffer.replaceAll("÷", "");
		while(k < buffer.length())
		{
                   j = 0;
                   j = compstr(buffer,k);
              if(j>0)
               {    
                    k = k+j; //change the k to point to current buffer 
               }
               else
               {   
            	   		m = new HashMap<String, String>();
            	   		m.put(buffer.charAt(k), buffer.charAt(k));
                                uniStringList.add(m);
                   k++;
               }
        }
    	   return uniStringList.size();
	}

int compsubstr(String inAsciiText,String inASCIIbuffer,int len,int k)
    {
        int i=0;
        
       
        char[]  var = inAsciiText.toCharArray();
        char[] buffer = inASCIIbuffer.toCharArray();
        if(inASCIIbuffer!=null){
        try{
          for (i=0;i<len && buffer.length > i;i++)
         {
        	  			if(buffer.length > k+i && len<=buffer.length){
        	  				if(var != null && var[i]!=buffer[k+i] )
        	  					return 0;
        	  			}else
                          return 0;
         }
        }catch(Exception e){
        	e.printStackTrace();
        }
       }
         return 1;
    }

int compstr(String buffer,int k)
    {
        int i;
        Map m;
        try{
        for (i= 0;i<ConversionMap.asciiUniMap.length;i++)
        { 
            int j = 0;
            j = compsubstr(ConversionMap.asciiUniMap[i].textASCII,buffer,ConversionMap.asciiUniMap[i].asciiLength,k);
            if(j == 1)
            {
            	//add to converted list
            	m = new HashMap<String, String>();
                int strLn = uniStringList.size();
    	   		m.put(ConversionMap.asciiUniMap[i].textASCII, ConversionMap.asciiUniMap[i].textUNI);
                        if(buffer.charAt(k)=='ð' && strLn > 0){
                                 //if arkavattu is not the first character
                                 Map mTemp = new HashMap<String, String>();
                                 mTemp = (Map)uniStringList.get(uniStringList.size()-1);
                                 uniStringList.remove(uniStringList.size()-1);
                                 uniStringList.add(m);
                                 uniStringList.add(mTemp);
                                 mTemp = null;
                                }else{
                                    uniStringList.add(m);
                        }
               return ConversionMap.asciiUniMap[i].asciiLength;//length of the conversion list 
            }
        }
        }catch(Exception e){
            e.printStackTrace();
            return 0;
        }
        return 0;
    }
    
    public String convertAnu(String inText){
    	String retVal = inText;
    	ConversionMap cMap = new ConversionMapAnu();
        retVal = cMap.Convert(inText);
    	return retVal;
    }
    
    public String convertSrg1(String inText){
    	String retVal = inText;
    	ConversionMap cMap = new ConversionMapSRG();
        retVal = cMap.Convert(inText);
    	return retVal;
    }
    
     public String convertSrg2(String inText){
    	String retVal = inText;
    	ConversionMap cMap = new ConversionMapSrgII();
        retVal = cMap.Convert(inText);
    	return retVal;
    }
     
    public String convertPrakashak(String inText){
    	String retVal = inText;
    	ConversionMap cMap = new ConversionMapPrakashak();
        retVal = cMap.Convert(inText);
    	return retVal;
    }
    
    public String convertSriLipi(String inText){
    	String retVal = inText;
    	ConversionMap cMap = new ConversionMapSrilipi();
        retVal = cMap.Convert(inText);
    	return retVal;
    }
    
    public String convertSurabhi(String inText){
    	String retVal = inText;
    	ConversionMap cMap = new ConversionMapSurabhi();
        retVal = cMap.Convert(inText);
    	return retVal;
    }
    }
   
   class CopyData {        
        private int progress;
        private String fileName;
        private long totalKiloBytes;
        private long kiloBytesCopied;
        
        CopyData(int progress, String fileName, long totalKiloBytes, long kiloBytesCopied) {
            this.progress = progress;
            this.fileName = fileName;
            this.totalKiloBytes = totalKiloBytes;
            this.kiloBytesCopied = kiloBytesCopied;
        }

        int getProgress() {
            return progress;
        }
        
        String getFileName() {
            return fileName;
        }

        long getTotalKiloBytes() {
            return totalKiloBytes;
        }

        long getKiloBytesCopied() {
            return kiloBytesCopied;
        }
    }
   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonConvert;
    private javax.swing.JButton jButtonDstFile;
    private javax.swing.JButton jButtonHelp;
    private javax.swing.JButton jButtonSrcFile;
    private javax.swing.JComboBox jComboBoxFileFormat;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField jTextFieldDstFile;
    private javax.swing.JTextField jTextFieldSrcFile;
    // End of variables declaration//GEN-END:variables
}
